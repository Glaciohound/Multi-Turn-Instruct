
class ModelBase:
    '''
    A base assistant model class.
    '''
    def compose_context(
        self,
        dialogue: list,
        assistant_responses: list,
        use_ground_truth_context: bool
    ) -> list:
        '''
        Converting the data dialogue and previous assistant responses into
        model-specific context format.

        Inputs:
        `dialogue`:
            List of ground-truth dialogue turns. Each turn is a dictionary with
            the following keys:
            - role: Role of the speaker. Either "user" or "assistant".
            - text: Text of the utterance.
            - (other keys): Additional keys that can be ignored for
              generation, mostly related to evaluation.
            Example:
            [
                {
                    "role": "user",
                    "text": "Hello!"
                    ...
                },
                {
                    "role": "assistant",
                    "text": "Hi! How can I help you?"
                    ...
                }
                ...
            ]
        `assistant_responses`:
            List of all previous assistant responses and nothing else.
            Each response is a dictionary with the following keys:
            - turn_id: index of the turn of the dialogue that the assistant
              generates
            - response: Text of the response.
            - (other keys): Additional keys that can be ignored for generation,
              mostly related to evaluation.
            Example:
            [
                {
                    "turn_id": 1,
                    "response": "Hi! How can I help you?"
                    ...
                },
                ...
            ]
        `use_ground_truth_context`:
            For the previous assistant turns, whether to use the ground-truth
            assistant responses or the previously generated assistant responses

        Output:
        List of context messages that can be passed into the `self.respond`
            method. The exact format of the context messages is model-specific.
            This output might be used for diagnostic purposes, so we recommend
            keeping a List structure similar to the input dialogue as output.
        '''
        dialogue = dialogue.copy() # Make a copy to avoid modifying the original
        if not use_ground_truth_context:
            for response in assistant_responses:
                dialogue[response["turn_id"]]["text"] = response["response"]
        messages = []
        for turn in dialogue:
            messages.append({
                "role": turn["role"],
                "content": turn["text"]
            })
        return messages

    def respond(self, messages: list, max_tokens: int,
                max_context_size: int) -> str:
        '''
        Generate a response for the given messages.
        Inputs:
        `messages`:
            Model-specific context messages. This is the output of the
            `self.compose_context` method.
        `max_tokens`:
            Maximum number of tokens to generate in the response.

        Output:
        A string response generated by the model.
        '''
        raise NotImplementedError()
